{"version":3,"sources":["components/Form/Form.js","store/actions/todoAction.js","store/actions/actionType.js","store/actions/noteAction.js","components/List/TextandForm.js","components/List/List.js","store/index.js","components/List/NoteList.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","e","setState","text","target","value","onSubmit","state","choice","addTodos","addNotes","onClickChoice","_this2","styleButtonTodo","styleButtonNotes","react_default","a","createElement","Fragment","className","concat","onClick","onChange","type","placeholder","Component","connect","dispatch","todo","payload","addTodo","note","addNote","TextandForm","event","saveButtonHandler","editTodo","index","viewMode","editButtonHandler","cancelButtoHandler","deleteButtonHandler","deleteTodo","buttonEdit","List","todos","map","key","List_TextandForm","todoReducer","initialStateTodos","initialStateNotes","notes","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","toConsumableArray","newTodos","splice","noteReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","NoteList","App","handleSubmit","prevState","es","components_Form_Form","components_List_List","List_NoteList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.580e5b78.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {connect} from'react-redux'\nimport {addTodo} from '../../store/actions/todoAction'\nimport {addNote} from'../../store/actions/noteAction'\n\n\nclass Form extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      text: '',\n      choice:'Todo'\n    }\n  }  \n\n  onChangeHandler = (e) => {\n    this.setState({ text : e.target.value })\n  }\n\n  onSubmit = () => {\n    if(this.state.choice ==='Todo'){\n      this.props.addTodos(this.state.text)\n    }else{\n      this.props.addNotes(this.state.text)\n    }\n    \n    this.setState({ text: '' })\n  }\n  onClickChoice=(value)=>{\n    this.setState({choice:value})\n  }\n\n  render ()\n  \n  {\n    var styleButtonTodo=\"\";\n    var styleButtonNotes=\"\";\n\n    if(this.state.choice === 'Todo'){\n      styleButtonTodo='btn-success'\n    }else{\n      styleButtonNotes='btn-success'\n    }\n  \n    return (\n      <>\n      <button className={`btn m-2 ${styleButtonTodo}`}onClick={()=>this.onClickChoice('Todo')}>Switch to Add Todo</button>\n      <button className={`btn ${styleButtonNotes}`} onClick={()=>this.onClickChoice('notes')}>Switch to Add Notes</button>\n    <p>Add {this.state.choice}</p>\n        <div className=\"form-group\">\n          <input \n          value={this.state.text}\n          onChange={this.onChangeHandler} type=\"text\" className=\"form-control\" placeholder=\"Type todo here\" />\n        </div>\n        <button onClick={this.onSubmit} className=\"btn btn-primary\">Add</button>\n      </>\n    )\n  }\n} \nconst mapDistpacthProps=dispatch=>{\n  return{\n    addTodos:(todo)=>dispatch(addTodo(todo)),\n    addNotes:(note)=>dispatch(addNote(note))\n  }\n}\n\nexport default connect(null,mapDistpacthProps)(Form)\n","import*as actionType from'./actionType'\r\nexport const addTodo =(todo)=>({type:actionType.ADD_TODOS,payload:todo});\r\n\r\nexport const deleteTodo=(index)=>({\r\n    type: actionType.DELETE_TODO,\r\n    payload:index\r\n});\r\nexport const editTodo=(payload)=>({\r\n    type:actionType.EDIT_TODO,\r\n    payload\r\n});\r\n","export const ADD_TODOS='ADD_TODOS'\r\nexport const EDIT_TODO='EDIT_TODO'\r\nexport const DELETE_TODO='DELETE_TODO'\r\nexport const ADD_NOTE ='ADD_NOTE'\r\n\r\n","\r\nimport*as actionType from'./actionType'\r\nexport const addNote =(note)=>({\r\n    type:actionType.ADD_NOTE,\r\n    payload:note\r\n})\r\n","import React,{Component} from'react'\r\nimport {connect}from'react-redux'\r\nimport { deleteTodo,editTodo} from'../../store/actions/todoAction'\r\n\r\nclass TextandForm extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            viewMode: 'show',\r\n            text: props.todo\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    // fungsi untuk handle ketika user dit text form\r\n    onChangeHandler=(event)=>{\r\n        this.setState({text:event.target.value})\r\n    }\r\n    //fungsi untuk handle ketika user klik tombol save\r\n    saveButtonHandler=()=>{\r\n        this.props.editTodo(this.props.index,this.state.text)\r\n        this.setState({viewMode:'show'})\r\n\r\n    }\r\n    // fungsi untuk handle ketika user klik Tombol edit\r\n    editButtonHandler =()=>{\r\n        this.setState({viewMode:'edit'})\r\n    }\r\n    // fungsi untuk handle ketika user klik tombol cancel\r\n    cancelButtoHandler=()=>{\r\n        this.setState({viewMode:'show'})\r\n    }\r\n    // fungsi untuk handle ketika user klik tombol delete\r\n    deleteButtonHandler=()=>{\r\n        this.props.deleteTodo(this.props.index)\r\n    }\r\n\r\n    render(){\r\n        // default tampilan todo berupa text\r\n        var todo=(\r\n            <p>{this.props.todo}</p>\r\n        )\r\n        // default tampilan disamping text todo berupa tombol edit\r\n         var buttonEdit=(\r\n             <button \r\n           className=\"btn btn-primary\"\r\n           onClick={this.editButtonHandler}\r\n\r\n             >\r\n                 Edit\r\n            </button>\r\n         )\r\n         // jika viewMode berubah menjadi 'edit'\r\n         if(this.state.viewMode === 'edit'){\r\n             // ganti element text todo menjadi form input\r\n            todo=(\r\n                <input \r\n                className=\"form-control\"\r\n                type=\"text\"\r\n                value={this.state.text}\r\n                onChange={this.onChangeHandler}\r\n                \r\n                />\r\n            )\r\n            // ganti tombol edit menjadi tombol save and cancel\r\n            buttonEdit=(\r\n                <>\r\n                <button \r\n                className=\"btn btn-success\"\r\n                onClick={this.saveButtonHandler}\r\n                 >save\r\n                 \r\n                 </button>\r\n                <button className=\"btn btn-warning\" \r\n                onClick={this.cancelButtoHandler}\r\n                >cancel</button>\r\n                \r\n                </>\r\n            )\r\n         }\r\n\r\n        return(\r\n            <div className=\"row\">\r\n            <div className=\"col-8\">\r\n                {todo}\r\n            </div>\r\n            <div className=\"col-4\">\r\n                {buttonEdit}\r\n           \r\n            <button className=\"btn btn-danger\"\r\n            onClick={this.deleteButtonHandler}\r\n            >\r\n                Delete\r\n            </button>\r\n\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nconst mapDispatchToProps = dispatch =>{\r\n    return {\r\n        editTodo:(index,todo)=>dispatch(editTodo({index,todo})),\r\n        deleteTodo: (index) => dispatch(deleteTodo(index)) \r\n        \r\n    }\r\n}\r\nexport default connect(null,mapDispatchToProps)(TextandForm)","import React, { Component } from 'react'\nimport {connect} from'react-redux'\nimport TextAndForm from'./TextandForm'\n\nclass List extends Component {\n\n\n\n  render (){\n    return (\n      <ul className=\"list-group\">\n        {this.props.todos.map((todo,index) => (\n          <li key={index} className=\"list-group-item container\">\n            <TextAndForm\n            todo={todo}\n            index={index}\n\n            />\n          </li>\n        ))}\n      </ul>\n    )    \n  }\n}\n// melakukan subscibe terhadap perubahan data di store\n// memasukan state yang ada di store ke komponen\nconst mapStateToProps = state =>{\n  return {\n    todos:state.todoReducer.todos\n  }\n}\nconst mapDispatchToProps=dispatch=>{\n  return{\n    editTodo:(index,todo)=>dispatch({type:'EDIT_TODO',payload:{index,todo}}),\n    deleteTodo:(index)=>dispatch({type:'DELETE_TODO',payload:index})\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(List)\n","import {createStore, combineReducers} from 'redux'\r\nimport*as actionType from'./actions/actionType'\r\nconst initialStateTodos={\r\n    todos:[]\r\n    \r\n}\r\nconst initialStateNotes={\r\n    notes:[]\r\n}\r\nconst todoReducer =(state=initialStateTodos,action)=>{\r\n    switch(action.type){\r\n        case actionType.ADD_TODOS:\r\n            return{\r\n                ...state,\r\n                todos:[...state.todos,action.payload]\r\n            }\r\n        case actionType.DELETE_TODO:\r\n            let newTodos=[...state.todos]\r\n            newTodos.splice(action.payload.index,1)\r\n            return {\r\n                ...state,\r\n                todos:newTodos\r\n            }\r\n        case actionType.EDIT_TODO:\r\n                let todos=[...state.todos];\r\n                let index=action.payload.index;\r\n                let todo=action.payload.todo;\r\n                todos[index]=todo\r\n                return{\r\n                    ...state,\r\n                    todos\r\n                }\r\n        default :\r\n        return state\r\n    }\r\n\r\n}\r\nconst noteReducer =(state=initialStateNotes,action)=>{\r\n    switch(action.type){\r\n        case actionType.ADD_NOTE:\r\n            return{\r\n                ...state,\r\n                notes:[...state.notes,action.payload]\r\n            }\r\n        default :\r\n        return state\r\n    }\r\n}\r\nconst rootReducer = combineReducers({\r\n    todoReducer: todoReducer,\r\n    noteReducer: noteReducer\r\n  })\r\n\r\n  const store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\nexport default store;","import React,{Component} from'react'\r\nimport {connect} from'react-redux'\r\nclass NoteList extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <p>Notes</p>\r\n                <ul className=\"list-group\">\r\n                    {this.props.notes.map((note,index)=>(\r\n                        <li key={index} className=\"list-group-item container\">\r\n                            {note}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps=state=>{\r\n    return {\r\n        notes:state.noteReducer.notes\r\n    }\r\n}\r\nexport default connect(mapStateToProps,null)(NoteList)","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form/Form'\nimport List from './components/List/List'\nimport {Provider} from 'react-redux'\nimport store from'./store'\nimport NoteList from'./components/List/NoteList'\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      todos: [],\n      notes:[]\n     \n    }\n  }\n  \n  handleSubmit = (todo) => {\n    this.setState(prevState => (\n      {todos: prevState.todos.concat(todo) }\n    ))\n  }\n\n  render() {\n    return (\n      <Provider store={store} >\n      <div className=\"App container\">\n        <Form/>\n        <List />\n        <NoteList />        \n      </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}